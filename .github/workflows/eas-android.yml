name: EAS Android
on:
  workflow_dispatch: {}

concurrency:
  group: eas-android-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-android:
    if: ${{ github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node (SDK51 -> Node 18+ ok; usamos 20)
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Show Node/npm versions
        run: |
          node -v
          npm -v
          npm config list

      - name: Force npm registry to public npmjs
        run: npm config set registry https://registry.npmjs.org/

      # ⬇️ mismo paso pero con fallback automático a `npm i`
      - name: Install dependencies
        run: |
          set -e
          if [ -f package-lock.json ] || [ -f npm-shrinkwrap.json ]; then
            echo "Lockfile encontrado -> npm ci (con fallback)"
            npm ci || (echo "npm ci falló -> usando npm i (fallback)" && npm i --no-audit --no-fund --legacy-peer-deps)
          else
            echo "Sin lockfile -> npm i (fallback)"
            npm i --no-audit --no-fund --legacy-peer-deps
          fi

      # ⬇️ Verificar que 'firebase' quedó instalada (y fallar si falta)
      - name: Verify firebase installed
        run: |
          node -e "try{console.log('firebase OK:', require('firebase/package.json').version)}catch(e){console.error('Firebase no instalada. Asegúrate de agregar \"firebase\" en dependencies de package.json.'); process.exit(1)}"

      # Alinear Babel preset con SDK 51 (v10)
      - name: Ensure Babel preset & core (CI-only)
        run: |
          set -e
          npm i -D --no-save babel-preset-expo@10 @babel/core@^7.24.0
          node -e "console.log('babel-preset-expo:', require('babel-preset-expo/package.json').version)"
          node -e "console.log('@babel/core:', require('@babel/core/package.json').version)"

      - name: EAS CLI version
        run: npx --yes eas-cli@latest --version

      - name: Prepare keystore file
        shell: bash
        run: |
          set -euo pipefail
          echo "$ANDROID_KEYSTORE_BASE64" | base64 -d > keystore.jks
          ls -l keystore.jks
        env:
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}

      - name: Create credentials.json
        shell: bash
        run: |
          set -euo pipefail
          node -e 'const fs=require("fs");const c={android:{keystore:{keystorePath:"keystore.jks",keystorePassword:process.env.ANDROID_KEYSTORE_PASSWORD,keyAlias:process.env.ANDROID_KEY_ALIAS,keyPassword:process.env.ANDROID_KEY_PASSWORD}}};fs.writeFileSync("credentials.json",JSON.stringify(c,null,2));'
          ls -l credentials.json
        env:
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}

      - name: Expo Doctor (diagnostic)
        run: npx --yes expo-doctor || true

      - name: Build Android (production, local creds)
        env:
          EAS_NON_INTERACTIVE: "1"
          EXPO_TOKEN: ${{ secrets.EAS_TOKEN }}
          EAS_ACCESS_TOKEN: ${{ secrets.EAS_TOKEN }}
        run: npx --yes eas-cli@latest build --platform android --profile apk --non-interactive
